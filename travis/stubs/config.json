{
  "ecdsa_signature_parse_der_lax": {
   "doc": "Parse a signature in 'lax DER' format\n\nReturns: 1 when the signature could be parsed, 0 otherwise.\n"
  },
  "secp256k1_context_create": {
    "doc": "Create a secp256k1 context object.\n"
  },
  "secp256k1_context_clone": {
    "doc": "Copies a secp256k1 context object.\n"
  },
  "secp256k1_context_destroy": {
    "doc": "Destroy a secp256k1 context object.\n\nThe resource may not be used afterwards.\nArgs:   ctx: an existing context to destroy (cannot be NULL).\n"
  },
  "secp256k1_ec_pubkey_parse": {
    "doc": "Parse a variable-length public key into the pubkey object.\n\nReturns 1 if the public key was fully valid, 0 if the public key could not be parsed or is invalid.\n"
  },
  "secp256k1_ec_pubkey_serialize": {
    "doc": "Serialize a pubkey object into a serialized byte sequence.\n\nReturns 1 always.\n"
  },
  "secp256k1_ecdsa_signature_parse_compact": {
    "doc": "Parse an ECDSA signature in compact (64 bytes) format.\n\nReturns: 1 when the signature could be parsed, 0 otherwise.\n"
  },
  "secp256k1_ecdsa_signature_parse_der": {
    "doc": "Parse a DER ECDSA signature.\n\nReturns: 1 when the signature could be parsed, 0 otherwise.\n"
  },
  "secp256k1_ecdsa_signature_serialize_der": {
    "doc": "Serialize an ECDSA signature in DER format.\n\nReturns: 1 if enough space was available to serialize, 0 otherwise\n"
  },
  "secp256k1_ecdsa_signature_serialize_compact": {
    "doc": "Serialize an ECDSA signature in compact (64 byte) format.\n\nReturns: 1\n"
  },
  "secp256k1_ecdsa_verify": {
    "doc": "Verify an ECDSA signature.\n\nReturns: 1: correct signature.\n         0: incorrect or unparseable signature.\n"
  },
  "secp256k1_ecdsa_signature_normalize": {
    "doc": "Convert a signature to a normalized lower-S form.\n\nReturns: 1 if sigin was not normalized, 0 if it already was.\n"
  },
  "secp256k1_ecdsa_sign": {
    "doc": "Create an ECDSA signature.\n\nReturns: 1: signature created\n         0: the nonce generation function failed, or the private key was invalid.\n"
  },
  "secp256k1_ec_seckey_verify": {
    "doc": "Verify an ECDSA secret key.\n\nReturns: 1: secret key is valid\n         0: secret key is invalid.\n"
  },
  "secp256k1_ec_pubkey_create": {
    "doc": "Compute the public key for a secret key.\n\nReturns: 1: secret was valid, public key stores\n         0: secret was invalid, try again.\n"
  },
  "secp256k1_ec_privkey_negate": {
    "doc": "Negates a private key in place.\n\nReturns: 1 always.\n"
  },
  "secp256k1_ec_pubkey_negate": {
    "doc": "Negates a public key in place.\n\nReturns: 1 always.\n"
  },
  "secp256k1_ec_privkey_tweak_add": {
    "doc": "Tweak a private key by adding tweak to it.\nReturns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n         uniformly random 32-byte arrays, or if the resulting private key\n         would be invalid (only when the tweak is the complement of the\n         private key). 1 otherwise."
  },
  "secp256k1_ec_pubkey_tweak_add": {
    "doc": "Tweak a public key by adding tweak times the generator to it.\nReturns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n         uniformly random 32-byte arrays, or if the resulting public key\n         would be invalid (only when the tweak is the complement of the\n         corresponding private key). 1 otherwise.\n"
  },
  "secp256k1_ec_privkey_tweak_mul": {
    "doc": "Tweak a private key by multiplying it by a tweak.\nReturns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n         uniformly random 32-byte arrays, or equal to zero. 1 otherwise.\n"
  },
  "secp256k1_ec_pubkey_tweak_mul": {
    "doc": "Tweak a public key by multiplying it by a tweak value.\nReturns: 0 if the tweak was out of range (chance of around 1 in 2^128 for\n         uniformly random 32-byte arrays, or equal to zero. 1 otherwise.\n"
  },
  "secp256k1_context_randomize": {
    "doc": "Updates the context randomization to protect against side-channel leakage.\n\nReturns: 1: randomization successfully updated.\n         0: error.\n"
  },
  "secp256k1_ec_pubkey_combine": {
    "doc": "Add a number of public keys together.\n\nReturns: 1: the sum of the public keys is valid.\n         0: the sum of the public keys is not valid.\n"
  },
  "secp256k1_scratch_space_create": {
    "doc": "Create a secp256k1 scratch space object.\n\n Returns: a newly created scratch space.\n Args: ctx:  an existing context object (cannot be NULL)\n In:   size: amount of memory to be available as scratch space. Some extra\n (<100 bytes) will be allocated for extra accounting."
  },
  "secp256k1_scratch_space_destroy": {
    "doc": "Destroy a secp256k1 scratch space.\n\n  The pointer may not be used afterwards.\n  Args:       ctx: a secp256k1 context object.\n          scratch: space to destroy"
  },
  "secp256k1_nonce_function_default": {
    "doc": "A default safe nonce generation function (currently equal to secp256k1_nonce_function_rfc6979)."
  },
  "secp256k1_nonce_function_rfc6979": {
    "doc": "An implementation of RFC6979 (using HMAC-SHA256) as nonce generation function.\n If a data pointer is passed, it is assumed to be a pointer to 32 bytes of\n extra entropy."
  },
  "secp256k1_ecdh": {
    "doc": "Compute an EC Diffie-Hellman secret in constant time.\nA custom hash function may be provided as the 5th\nargument, once the length of data to be written is\npassed as the 6th argument.\nOptional additional data may be provided to the callback\nvia the 7th argument.\nThe default hash function is essentially the following:\nfunction (&$output, $x, $y, $data) {\n    $version = 0x02 | (unpack(\"C\", $y[31])[1] & 0x01);\n    $ctx = hash_init('sha256', 0);\n    hash_update($ctx, pack(\"C\", $version));\n    hash_update($ctx, $x);\n    $output = hash_final($ctx, true);\n    return 1;\n};\n\nReturns: 1: exponentiation was successful\n         0: scalar was invalid (zero or overflow)\n"
  },
  "secp256k1_ecdsa_recoverable_signature_parse_compact": {
    "doc": "Parse a compact ECDSA signature (64 bytes + recovery id).\n\nReturns: 1 when the signature could be parsed, 0 otherwise\n"
  },
  "secp256k1_ecdsa_recoverable_signature_convert": {
    "doc": "Convert a recoverable signature into a normal signature.\n\nReturns: 1\n"
  },
  "secp256k1_ecdsa_recoverable_signature_serialize_compact": {
    "doc": "Serialize an ECDSA signature in compact format (64 bytes + recovery id).\n\nReturns: 1\n"
  },
  "secp256k1_ecdsa_sign_recoverable": {
    "doc": "Create a recoverable ECDSA signature.\n\nReturns: 1: signature created\n         0: the nonce generation function failed, or the private key was invalid.\n"
  },
  "secp256k1_ecdsa_recover": {
    "doc": "Recover an ECDSA public key from a signature.\n\nReturns: 1: public key successfully recovered (which guarantees a correct signature).\n         0: otherwise.\n"
  },
  "secp256k1_schnorrsig_serialize": {
    "doc": "Serialize a Schnorr signature.\n\n Returns: 1\n Args:    ctx: a secp256k1 context object\n Out:   out64: pointer to a 64-byte array to store the serialized signature\n In:      sig: pointer to the signature\n\n See secp256k1_schnorrsig_parse for details about the encoding."
  },
  "secp256k1_schnorrsig_parse": {
    "doc": "Parse a Schnorr signature.\n\n Returns: 1 when the signature could be parsed, 0 otherwise.\n Args:    ctx: a secp256k1 context object\n Out:     sig: pointer to a signature object\n In:     in64: pointer to the 64-byte signature to be parsed\n\nThe signature is serialized in the form R||s, where R is a 32-byte public\nkey (x-coordinate only; the y-coordinate is considered to be the unique\ny-coordinate satisfying the curve equation that is a quadratic residue)\nand s is a 32-byte big-endian scalar.\n\nAfter the call, sig will always be initialized. If parsing failed or the\nencoded numbers are out of range, signature validation with it is\nguaranteed to fail for every message and public key."
  },
  "secp256k1_schnorrsig_sign": {
    "doc": "Create a Schnorr signature.\n\n Returns 1 on success, 0 on failure.\n  Args:    ctx: pointer to a context object, initialized for signing (cannot be NULL)\n  Out:     sig: pointer to the returned signature (cannot be NULL)\n  In:    msg32: the 32-byte message being signed (cannot be NULL)\n        seckey: pointer to a 32-byte secret key (cannot be NULL)\n       noncefp: pointer to a nonce generation function. If NULL, secp256k1_nonce_function_bipschnorr is used\n         ndata: pointer to arbitrary data used by the nonce generation function (can be NULL)"
  },
  "secp256k1_schnorrsig_verify": {
    "doc": "Verify a Schnorr signature.\n\n  Returns: 1: correct signature\n           0: incorrect or unparseable signature\n  Args:    ctx: a secp256k1 context object, initialized for verification.\n  In:      sig: the signature being verified (cannot be NULL)\n         msg32: the 32-byte message being verified (cannot be NULL)\n        pubkey: pointer to a public key to verify with (cannot be NULL)"
  },
  "secp256k1_schnorrsig_verify_batch": {
    "doc": "Verifies a set of Schnorr signatures.\n\n Returns 1 if all succeeded, 0 otherwise. In particular, returns 1 if n_sigs is 0.\n\n  Args:    ctx: a secp256k1 context object, initialized for verification.\n       scratch: scratch space used for the multiexponentiation\n  In:      sig: array of signatures, or NULL if there are no signatures\n         msg32: array of messages, or NULL if there are no signatures\n            pk: array of public keys, or NULL if there are no signatures\n        n_sigs: number of signatures in above arrays. Must be smaller than\n                2^31 and smaller than half the maximum size_t value. Must be 0\n                if above arrays are NULL."
  },
  "secp256k1_nonce_function_bipschnorr": {
    "doc": "An implementation of the nonce generation function as defined in BIP-schnorr.\n If a data pointer is passed, it is assumed to be a pointer to 32 bytes of\n extra entropy."
  }
}
